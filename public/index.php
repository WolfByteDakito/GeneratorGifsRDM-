<?php


use GeneratorGifsRDM\GifService;

// On charge l'autoloader de Composer
require __DIR__ . '/../vendor/autoload.php';

// Le fichier de notre classe se charge automatiquement grÃ¢ce Ã  l'autoloading

// 1. Initialisation : Vous devez obtenir une clÃ© Giphy et la stocker de maniÃ¨re sÃ©curisÃ©e.
// Charger la librairie de gestion des variables d'environnement
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->load();

// ğŸ”‘ Maintenant, on rÃ©cupÃ¨re la clÃ© de maniÃ¨re sÃ©curisÃ©e
$apiKey = $_ENV['GIPHY_API_KEY'] ?? null; 

if (!$apiKey) {
    throw new \Exception("La clÃ© GIPHY_API_KEY n'est pas dÃ©finie dans le fichier .env !");
}

// --- DÃ©finition du fetcher HTTP rÃ©el ---
// Cette fonction utilise une mÃ©thode PHP native pour faire l'appel rÃ©seau
$realHttpFetcher = function (string $url): string|false {
    // NOTE : Nous utilisons file_get_contents ici, mais Guzzle serait recommandÃ©
    $context = stream_context_create([
        'http' => [
            'ignore_errors' => true // Pour Ã©viter que file_get_contents ne jette une erreur sur 404/500
        ]
    ]);
    return @file_get_contents($url, false, $context);
};

// ----------------------------------------

try {
    // 2. Instanciation avec les DEUX arguments
    // On passe la clÃ© API ET la fonction de fetching rÃ©elle
    $gifService = new GeneratorGifsRDM\GifService($apiKey, $realHttpFetcher); // Correction ici !

    // ... (suite de votre code pour traiter la requÃªte) ...

    // RÃ©cupÃ©ration d'un tag (par exemple, si le client le demande)
    $tag = $_GET['tag'] ?? 'programming'; 

    $gifUrl = $gifService->getRandomGifUrl($tag);

    // 2. RÃ©ponse JSON
    header('Content-Type: application/json');

    if ($gifUrl) {
        // SuccÃ¨s : retourne l'URL du GIF
        echo json_encode(['success' => true, 'url' => $gifUrl]);
    } else {
        // Ã‰chec : retourne une erreur (votre cas "GIF Nul")
        http_response_code(404); // Code standard pour "Non trouvÃ©"
        echo json_encode(['success' => false, 'message' => 'Aucun GIF trouvÃ© pour ce terme.']);
    }

} catch (\Exception $e) {
    // Erreur critique (clÃ© API manquante, etc.)
    http_response_code(500); // Code standard pour "Erreur serveur"
    echo json_encode(['success' => false, 'message' => 'Erreur interne du serveur.']);
}